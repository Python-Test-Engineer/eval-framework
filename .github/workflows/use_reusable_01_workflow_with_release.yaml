name: Version Management

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  version:
    uses: Python-Test-Engineer/llm-evaluation-framework/.github/workflows/reusable_01_workflow.yaml@main
    permissions:
      contents: write
    
  # Create a GitHub release after version increment
  create-release:
    needs: version
    runs-on: ubuntu-latest
    if: needs.version.outputs.should_release == 'true'
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Get the previous tag for comparison
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match="v[0-9]*.[0-9]*.[0-9]*" ${{ needs.version.outputs.new_tag }}^1 2>/dev/null || echo "")
        
        # Generate release notes from commits
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since previous tag, format them nicely
          git log ${PREVIOUS_TAG}..${{ needs.version.outputs.new_tag }} --oneline --pretty=format:"- %s" >> release_notes.md
          
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ needs.version.outputs.new_tag }}" >> release_notes.md
        else
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          echo "Initial release" >> release_notes.md
        fi
        
        # Set release notes as output
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "Generated release notes:"
        cat release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version.outputs.new_tag }}
        name: Release ${{ needs.version.outputs.new_version }}
        body: |
          # Release ${{ needs.version.outputs.new_version }}
          
          **Release Type:** ${{ needs.version.outputs.increment_type }} release
          **Previous Version:** ${{ needs.version.outputs.current_version }}
          
          ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          
          ---
          
          *This release was automatically generated by GitHub Actions.*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Show release information
      run: |
        echo "âœ… GitHub Release created successfully!"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.version.outputs.new_tag }}"
        echo "Version: ${{ needs.version.outputs.new_version }}"
        echo "Type: ${{ needs.version.outputs.increment_type }}"